var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['d3', 'data', 'graph'], function(d3, data, graph) {
  var bar, draw, factorise, pick_y, wrap;
  draw = function(opts) {
    var action, container, height, highest, id, m, param, sources, width, x, xAxis, x_vars, x_vars_label, y, yAxis;
    id = opts.id;
    action = opts.action;
    x_vars = opts.x_vars;
    param = opts.param;
    width = $("#" + id + "-graph").width() - 50;
    height = _g.base_graph.height() - 15;
    sources = data.pluck(_g.queries[param], param).filter(function(s) {
      return !data.ignored_asset(s);
    });
    x_vars = x_vars.filter(function(e) {
      return !data.ignored_asset(e);
    });
    x_vars_label = x_vars.map(function(e) {
      return _g.details[e] || e;
    });
    x = d3.scale.ordinal().domain(x_vars_label).rangeRoundBands([0, width]);
    xAxis = d3.svg.axis().scale(x).orient("bottom");
    m = d3.max(sources, function(d) {
      return d['value'];
    });
    highest = x_vars.length === 1 ? _g.max_diff / 100 : d3.max(sources, function(d) {
      return Math.abs(d['value']);
    });
    y = d3.scale.linear().domain([(-1) * highest, highest]).range([height, 0]);
    yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(function(v) {
      return graph.tick_format(v, m);
    });
    if (action === 'create') {
      graph.clear(id);
      container = graph.draw(id);
    }
    if (action === 'update') {
      d3.selectAll("#" + id + " .year-watermark").remove();
      d3.selectAll("#" + id + " .axis").remove();
      d3.selectAll("#" + id + " rect").remove();
      container = d3.select("g#" + id);
    }
    container.append('g').attr({
      "class": 'x axis',
      transform: "translate(0, " + (height / 2) + ")"
    }).call(xAxis);
    container.selectAll(".tick text").call(wrap, x.rangeBand());
    container.append('g').attr({
      "class": 'y axis'
    }).call(yAxis);
    container.append('text').attr({
      "class": 'axis',
      x: -(height / 2),
      y: -50,
      transform: 'rotate(-90)',
      dy: '1em',
      'text-anchor': 'middle'
    }).text(function(d) {
      return "change in indicator over base %";
    });
    container.append('text').attr({
      "class": 'axis',
      x: width / 2,
      y: height,
      dy: '1em',
      'text-anchor': 'middle'
    }).text(function(d) {
      return _g.subtitles[param];
    });
    container.selectAll('.focus').data(sources).enter().append('rect').attr({
      id: function(d) {
        return d[param];
      },
      "class": 'bar',
      width: x_vars.length === 1 ? width * 0.5 : (width / x_vars.length) - 5,
      height: function(d) {
        return Math.abs(factorise(d['value'], highest, height / 2));
      },
      x: function(d) {
        if ((param != null) && d[param]) {
          return x(_g.details[d[param]]) + 5;
        } else {
          return width * 0.25;
        }
      },
      y: function(d) {
        return pick_y(d, highest, height / 2);
      },
      fill: function(d) {
        var ref;
        if (ref = d[param], indexOf.call(_g.current_assets, ref) >= 0) {
          return _g.blue;
        } else {
          return _g.grey;
        }
      },
      "fill-opacity": 0.5,
      stroke: function(d) {
        var ref;
        if (ref = d[param], indexOf.call(_g.current_assets, ref) >= 0) {
          return _g.blue;
        } else {
          return _g.grey;
        }
      },
      "stroke-opacity": 0.3
    }).on({
      'click': function(d) {
        return _g.click_focus(d, id, param);
      }
    });
    return d3.selectAll('text').moveToFront();
  };
  factorise = function(value, highest_value, height) {
    if (highest_value === 0) {
      return 0;
    }
    return value * (height / highest_value);
  };
  pick_y = function(d, highest_value, height) {
    var c;
    c = factorise(d['value'], highest_value, height);
    if (c < 0) {
      return height;
    } else {
      return height - Math.abs(c);
    }
  };
  wrap = function(text, width) {
    return text.each(function() {
      var dy, line, lineHeight, lineNumber, results, tspan, word, words, y;
      text = d3.select(this);
      words = text.text().split(/\s+/).reverse();
      line = [];
      lineNumber = 0;
      lineHeight = 1.1;
      y = text.attr('y');
      dy = parseFloat(text.attr('dy'));
      tspan = text.text(null).append('tspan').attr({
        x: 0,
        y: y,
        dy: dy + 'em'
      });
      results = [];
      while (word = words.pop()) {
        line.push(word);
        tspan.text(line.join(' '));
        if (tspan.node().getComputedTextLength() > width) {
          line.pop();
          tspan.text(line.join(' '));
          line = [word];
          results.push(tspan = text.append('tspan').attr({
            x: 0,
            y: y,
            dy: ++lineNumber * lineHeight + dy + 'em'
          }).text(word));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
  };
  return bar = {
    draw: draw
  };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
