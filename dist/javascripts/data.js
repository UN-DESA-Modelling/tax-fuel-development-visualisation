var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['d3'], function(d3) {
  var csv_query, data, filter_ignored, ignored_asset, parse_date, pluck, reformat;
  parse_date = d3.time.format("%Y").parse;
  filter_ignored = function(array) {
    var a, rep;
    rep = array[0];
    if (rep.scn != null) {
      a = array.filter(function(e) {
        var ref;
        return !(ref = e.scn, indexOf.call(_g.ignored_scenarios, ref) >= 0);
      });
    } else if (rep.cnt != null) {
      a = array.filter(function(e) {
        var ref;
        return !(ref = e.cnt, indexOf.call(_g.ignored_countries, ref) >= 0);
      });
    } else if (rep.ind != null) {
      a = array.filter(function(e) {
        var ref;
        return !(ref = e.ind, indexOf.call(_g.ignored_indicators, ref) >= 0);
      });
    }
    return a;
  };
  csv_query = function(source, country, scenario, indicator) {
    var source0, source1;
    source0 = source1 = null;
    source.forEach(function(d) {
      if (d['cnt'] === country && d['ind'] === indicator && d['scn'] === scenario) {
        source0 = reformat(d);
      }
      if (d['cnt'] === country && d['ind'] === indicator && d['scn'] === 'base') {
        return source1 = reformat(d);
      }
    });
    return [source0, source1];
  };
  reformat = function(d) {
    var j, len, o, p, ref, t;
    o = [];
    ref = _g.year_range;
    for (j = 0, len = ref.length; j < len; j++) {
      t = ref[j];
      p = parseFloat(d[t]);
      o.push({
        indicator: d['ind'],
        scenario: d['scn'],
        country: d['cnt'],
        date: parse_date(t.toString()),
        value: p
      });
    }
    return o;
  };
  pluck = function(query, param) {
    return query.map(function(q) {
      var b, o, result;
      result = {};
      o = {};
      if (param !== 'year') {
        o = {
          obj: q[0].filter(function(i) {
            return i['date'].getFullYear() === _g.current_year;
          }).first(),
          base: q[1].filter(function(i) {
            return i['date'].getFullYear() === _g.current_year;
          }).first()
        };
      } else {
        o = {
          obj: query[0].filter(function(i) {
            return i['date'].getFullYear() === _g.current_year;
          }).first(),
          base: query[1].filter(function(i) {
            return i['date'].getFullYear() === _g.current_year;
          }).first()
        };
      }
      b = o['base']['value'];
      result['value'] = (o['obj']['value'] - b) / (b * 100);
      result[param] = o['obj'][param];
      return result;
    });
  };
  ignored_asset = function(x) {
    var e;
    e = typeof x === 'string' ? x : x.indicator || x.scenario || x.country;
    return (indexOf.call(_g.ignored_indicators, e) >= 0) || (indexOf.call(_g.ignored_scenarios, e) >= 0) || (indexOf.call(_g.ignored_countries, e) >= 0);
  };
  return data = {
    csv_query: csv_query,
    filter_ignored: filter_ignored,
    pluck: pluck,
    ignored_asset: ignored_asset
  };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LE9BQU8sQ0FBUCxLQUFZLFFBQWhCLEdBQStCLENBQS9CLEdBQXdDLENBQUMsQ0FBQyxTQUFILElBQWtCLENBQUMsQ0FBQyxRQUFwQixJQUFrQyxDQUFDLENBQUM7QUFFL0UsV0FBUSxDQUFDLGFBQUssRUFBRSxDQUFDLGtCQUFSLEVBQUEsQ0FBQSxNQUFELENBQUEsSUFBZ0MsQ0FBQyxhQUFLLEVBQUUsQ0FBQyxpQkFBUixFQUFBLENBQUEsTUFBRCxDQUFoQyxJQUErRCxDQUFDLGFBQUssRUFBRSxDQUFDLGlCQUFSLEVBQUEsQ0FBQSxNQUFEO0VBSHpEO0FBTWhCLFNBQU8sSUFBQSxHQUNMO0lBQUEsU0FBQSxFQUFnQixTQUFoQjtJQUNBLGNBQUEsRUFBZ0IsY0FEaEI7SUFFQSxLQUFBLEVBQWdCLEtBRmhCO0lBR0EsYUFBQSxFQUFnQixhQUhoQjs7QUFwRlcsQ0FBZiIsImZpbGUiOiJkYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lIFsnZDMnXSwgKGQzKSAtPlxuICBwYXJzZV9kYXRlID0gZDMudGltZS5mb3JtYXQoXCIlWVwiKS5wYXJzZVxuXG4gIGZpbHRlcl9pZ25vcmVkID0gKGFycmF5KSAtPlxuICAgIHJlcCA9IGFycmF5WzBdXG5cbiAgICBpZiByZXAuc2NuP1xuICAgICAgYSA9IGFycmF5LmZpbHRlciAoZSkgLT5cbiAgICAgICAgbm90IChlLnNjbiBpbiBfZy5pZ25vcmVkX3NjZW5hcmlvcylcblxuICAgIGVsc2UgaWYgcmVwLmNudD9cbiAgICAgIGEgPSBhcnJheS5maWx0ZXIgKGUpIC0+XG4gICAgICAgIG5vdCAoZS5jbnQgaW4gX2cuaWdub3JlZF9jb3VudHJpZXMpXG5cbiAgICBlbHNlIGlmIHJlcC5pbmQ/XG4gICAgICBhID0gYXJyYXkuZmlsdGVyIChlKSAtPlxuICAgICAgICBub3QgKGUuaW5kIGluIF9nLmlnbm9yZWRfaW5kaWNhdG9ycylcblxuICAgIHJldHVybiBhXG5cblxuICBjc3ZfcXVlcnkgPSAoc291cmNlLCBjb3VudHJ5LCBzY2VuYXJpbywgaW5kaWNhdG9yKSAtPlxuICAgIHNvdXJjZTAgPSBzb3VyY2UxID0gbnVsbFxuXG4gICAgc291cmNlLmZvckVhY2ggKGQpIC0+XG4gICAgICBpZiAoZFsnY250J10gIGlzIGNvdW50cnkgIGFuZFxuICAgICAgICAgIGRbJ2luZCddICBpcyBpbmRpY2F0b3IgYW5kXG4gICAgICAgICAgZFsnc2NuJ10gIGlzIHNjZW5hcmlvKVxuXG4gICAgICAgIHNvdXJjZTAgPSByZWZvcm1hdCBkXG5cblxuICAgICAgaWYgKGRbJ2NudCddICBpcyBjb3VudHJ5ICBhbmRcbiAgICAgICAgICBkWydpbmQnXSAgaXMgaW5kaWNhdG9yIGFuZFxuICAgICAgICAgIGRbJ3NjbiddICBpcyAnYmFzZScpXG5cbiAgICAgICAgc291cmNlMSA9IHJlZm9ybWF0IGRcblxuICAgIHJldHVybiBbc291cmNlMCwgc291cmNlMV1cblxuXG4gIHJlZm9ybWF0ID0gKGQpIC0+XG4gICAgbyA9IFtdXG5cbiAgICBmb3IgdCBpbiBfZy55ZWFyX3JhbmdlXG4gICAgICBwID0gcGFyc2VGbG9hdCBkW3RdXG5cbiAgICAgIG8ucHVzaFxuICAgICAgICBpbmRpY2F0b3I6IGRbJ2luZCddXG4gICAgICAgIHNjZW5hcmlvOiAgZFsnc2NuJ11cbiAgICAgICAgY291bnRyeTogICBkWydjbnQnXVxuICAgICAgICBkYXRlOiAgICAgIHBhcnNlX2RhdGUgdC50b1N0cmluZygpXG4gICAgICAgIHZhbHVlOiAgICAgcFxuXG4gICAgcmV0dXJuIG9cblxuXG4gIHBsdWNrID0gKHF1ZXJ5LCBwYXJhbSkgLT5cbiAgICBxdWVyeS5tYXAgKHEpIC0+XG4gICAgICByZXN1bHQgPSB7fVxuICAgICAgbyA9IHt9XG5cbiAgICAgIGlmIHBhcmFtICE9ICd5ZWFyJ1xuICAgICAgICBvID1cbiAgICAgICAgICBvYmo6ICBxWzBdLmZpbHRlcigoaSkgLT4gaVsnZGF0ZSddLmdldEZ1bGxZZWFyKCkgaXMgX2cuY3VycmVudF95ZWFyKS5maXJzdCgpXG4gICAgICAgICAgYmFzZTogcVsxXS5maWx0ZXIoKGkpIC0+IGlbJ2RhdGUnXS5nZXRGdWxsWWVhcigpIGlzIF9nLmN1cnJlbnRfeWVhcikuZmlyc3QoKVxuICAgICAgZWxzZVxuICAgICAgICBvID1cbiAgICAgICAgICBvYmo6ICBxdWVyeVswXS5maWx0ZXIoKGkpIC0+IGlbJ2RhdGUnXS5nZXRGdWxsWWVhcigpIGlzIF9nLmN1cnJlbnRfeWVhcikuZmlyc3QoKVxuICAgICAgICAgIGJhc2U6IHF1ZXJ5WzFdLmZpbHRlcigoaSkgLT4gaVsnZGF0ZSddLmdldEZ1bGxZZWFyKCkgaXMgX2cuY3VycmVudF95ZWFyKS5maXJzdCgpXG5cbiAgICAgIGIgPSBvWydiYXNlJ11bJ3ZhbHVlJ11cbiAgICAgIHJlc3VsdFsndmFsdWUnXSA9IChvWydvYmonXVsndmFsdWUnXSAtIGIpIC8gKGIgKiAxMDApXG4gICAgICByZXN1bHRbcGFyYW1dID0gb1snb2JqJ11bcGFyYW1dXG4gICAgICByZXR1cm4gcmVzdWx0XG5cblxuICBpZ25vcmVkX2Fzc2V0ID0gKHgpIC0+XG4gICAgZSA9IGlmICh0eXBlb2YgeCBpcyAnc3RyaW5nJykgdGhlbiB4IGVsc2UgKCh4LmluZGljYXRvcikgb3IgKHguc2NlbmFyaW8pIG9yICh4LmNvdW50cnkpKVxuXG4gICAgcmV0dXJuICgoZSBpbiBfZy5pZ25vcmVkX2luZGljYXRvcnMpIG9yIChlIGluIF9nLmlnbm9yZWRfc2NlbmFyaW9zKSBvciAoZSBpbiBfZy5pZ25vcmVkX2NvdW50cmllcykpXG5cblxuICByZXR1cm4gZGF0YSA9XG4gICAgY3N2X3F1ZXJ5OiAgICAgIGNzdl9xdWVyeVxuICAgIGZpbHRlcl9pZ25vcmVkOiBmaWx0ZXJfaWdub3JlZFxuICAgIHBsdWNrOiAgICAgICAgICBwbHVja1xuICAgIGlnbm9yZWRfYXNzZXQ6ICBpZ25vcmVkX2Fzc2V0XG4iXX0=
