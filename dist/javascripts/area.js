var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['d3', 'graph', 'global'], function(d3, graph, _g) {
  var area, bisectDate, container, create_time_mark, draw, height, make_frame, move_time_mark, width, x, y;
  container = null;
  width = _g.base_graph.width();
  height = _g.base_graph.height() - 20;
  bisectDate = d3.bisector(function(d) {
    return d.date;
  }).left;
  x = y = null;
  make_frame = function(source0, source1) {
    var frame, i, tmp_diff, y_max, y_min;
    y_min = d3.min(Array.prototype.concat(d3.min(source0, function(d) {
      return d['value'];
    }), d3.min(source1, function(d) {
      return d['value'];
    })));
    y_max = d3.max(Array.prototype.concat(d3.max(source0, function(d) {
      return d['value'];
    }), d3.max(source1, function(d) {
      return d['value'];
    })));
    _g.max_diff = i = 0;
    while (i < source0.length) {
      tmp_diff = Math.abs(source1[i]['value'] - source0[i]['value']) / source0[i]['value'];
      if (tmp_diff > _g.max_diff) {
        _g.max_diff = tmp_diff;
      }
      i++;
    }
    frame = graph.create_frame(source0, {
      min: y_min,
      max: y_max
    }, {
      width: width,
      height: height
    });
    x = frame.x;
    y = frame.y;
    container = graph.draw('area');
    return graph.set_axis(container, frame.xAxis, 0, frame.yAxis, height);
  };
  move_time_mark = function(d, dz) {
    var ddate, tm;
    ddate = d.date || (new Date(_g.current_year + "/01/01"));
    tm = d3.selectAll('.time-marker');
    tm.attr({
      transform: "translate(" + (x(ddate)) + ", 0)"
    });
    return tm.select("text").text(d3.format(",.2f")(dz)).attr({
      y: 20,
      x: -50,
      stroke: 'grey',
      'font-size': '0.8em'
    });
  };
  create_time_mark = function(source, rows) {
    var click, mousemove, tm;
    tm = d3.select('#area').append('g').attr({
      id: "time-marker-line",
      "class": "time-marker"
    });
    tm.append("rect").attr({
      width: 0.1,
      height: height,
      stroke: _g.blue_d,
      fill: "none"
    });
    tm.append("text").attr("x", 0).attr("dy", "-0.35em");
    mousemove = function(it) {
      var b, d, d_left, d_right, i, v, x_mouse;
      if (_g.mousemove_disabled) {
        return;
      }
      x_mouse = x.invert(d3.mouse(it)[0]);
      i = bisectDate(source[0], x_mouse, 1);
      d_left = source[0][i - 1];
      d_right = source[0][i];
      d = (d_right != null) && (x_mouse - d_left.date) > (d_right.date - x_mouse) ? d_right : d_left;
      if (_g.current_year !== d.date.getFullYear()) {
        _g.current_year = d.date.getFullYear();
        _g.reload_graphs('update');
        d3.selectAll('.axis').moveToFront();
        d3.selectAll('.time-marker').attr('year', d.date.getFullYear());
      }
      v = source[0].filter(function(e) {
        return e.date.getFullYear() === _g.current_year;
      }).first();
      b = source[1].filter(function(e) {
        return e.date.getFullYear() === _g.current_year;
      }).first();
      return area.move_time_mark(d, b['value'] - v['value']);
    };
    click = function(it) {
      _g.mousemove_disabled = !_g.mousemove_disabled;
      mousemove(it);
      return d3.selectAll('.time-marker rect').style({
        stroke: _g.mousemove_disabled ? "black" : _g.blue_d
      });
    };
    return container.append("rect").attr({
      "class": "overlay",
      width: width,
      height: height,
      fill: 'none'
    }).on('mousemove', function() {
      return mousemove(this);
    }).on('click', function() {
      return click(this);
    });
  };
  draw = function(query) {
    var area, b, o;
    graph.clear('area');
    make_frame(query[0], query[1]);
    b = query[1];
    o = query[0];
    area = d3.svg.area().x(function(d) {
      return x(d.date);
    }).y(function(d, i) {
      return y(b[i]['value']);
    });
    container.datum(o);
    container.append('clipPath').attr("id", "clip-below").append("path").attr("d", area.y0(height));
    container.append('clipPath').attr("id", "clip-above").append("path").attr("d", area.y0(0));
    container.append('path').attr({
      d: area.y0(function(d, i) {
        return y(o[i]['value']);
      }),
      fill: function(d) {
        var ref;
        if (ref = d[0]['indicator'], indexOf.call(_g.inverted_indicators, ref) >= 0) {
          return _g.blue;
        } else {
          return _g.blue;
        }
      },
      'fill-opacity': 0.4,
      'clip-path': 'url(#clip-above)'
    });
    container.append('path').attr({
      d: area.y0(function(d, i) {
        return y(o[i]['value']);
      }),
      fill: function(d) {
        var ref;
        if (ref = d[0]['indicator'], indexOf.call(_g.inverted_indicators, ref) >= 0) {
          return _g.blue;
        } else {
          return _g.blue;
        }
      },
      'fill-opacity': 0.4,
      'clip-path': 'url(#clip-below)'
    });
    container.selectAll('path').attr({
      stroke: 'black',
      'stoke-width': 1,
      'stroke-opacity': 0.2
    });
    create_time_mark(query, _g.indicators_query);
    return container.append('text').attr({
      "class": 'axis',
      x: -height / 2,
      y: -50,
      transform: 'rotate(-90)',
      dy: '1em',
      'text-anchor': 'middle'
    }).text(function(d) {
      return _g.details[d[0]['indicator']];
    });
  };
  return area = {
    draw: draw,
    x: function(value) {
      return x.call(this, value);
    },
    create_time_mark: create_time_mark,
    move_time_mark: move_time_mark
  };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyZWEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBQSxDQUFPLENBQUMsSUFBRCxFQUFPLE9BQVAsRUFBZ0IsUUFBaEIsQ0FBUCxFQUFrQyxTQUFDLEVBQUQsRUFBSyxLQUFMLEVBQVksRUFBWjtBQUNoQyxNQUFBO0VBQUEsU0FBQSxHQUFZO0VBRVosS0FBQSxHQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBZCxDQUFBO0VBQ1QsTUFBQSxHQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBZCxDQUFBLENBQUEsR0FBeUI7RUFFbEMsVUFBQSxHQUFhLEVBQUUsQ0FBQyxRQUFILENBQVksU0FBQyxDQUFEO1dBQU8sQ0FBQyxDQUFDO0VBQVQsQ0FBWixDQUEwQixDQUFDO0VBRXhDLENBQUEsR0FBSSxDQUFBLEdBQUk7RUFHUixVQUFBLEdBQWEsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUNYLFFBQUE7SUFBQSxLQUFBLEdBQVEsRUFBRSxDQUFDLEdBQUgsQ0FBTyxLQUFLLENBQUEsU0FBRSxDQUFBLE1BQVAsQ0FBYyxFQUFFLENBQUMsR0FBSCxDQUFPLE9BQVAsRUFBZ0IsU0FBQyxDQUFEO2FBQU8sQ0FBRSxDQUFBLE9BQUE7SUFBVCxDQUFoQixDQUFkLEVBQWtELEVBQUUsQ0FBQyxHQUFILENBQU8sT0FBUCxFQUFnQixTQUFDLENBQUQ7YUFBTyxDQUFFLENBQUEsT0FBQTtJQUFULENBQWhCLENBQWxELENBQVA7SUFDUixLQUFBLEdBQVEsRUFBRSxDQUFDLEdBQUgsQ0FBTyxLQUFLLENBQUEsU0FBRSxDQUFBLE1BQVAsQ0FBYyxFQUFFLENBQUMsR0FBSCxDQUFPLE9BQVAsRUFBZ0IsU0FBQyxDQUFEO2FBQU8sQ0FBRSxDQUFBLE9BQUE7SUFBVCxDQUFoQixDQUFkLEVBQWtELEVBQUUsQ0FBQyxHQUFILENBQU8sT0FBUCxFQUFnQixTQUFDLENBQUQ7YUFBTyxDQUFFLENBQUEsT0FBQTtJQUFULENBQWhCLENBQWxELENBQVA7SUFFUixFQUFFLENBQUMsUUFBSCxHQUFjLENBQUEsR0FBSTtBQUVsQixXQUFNLENBQUEsR0FBSSxPQUFPLENBQUMsTUFBbEI7TUFDRSxRQUFBLEdBQVcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxPQUFRLENBQUEsQ0FBQSxDQUFHLENBQUEsT0FBQSxDQUFYLEdBQXNCLE9BQVEsQ0FBQSxDQUFBLENBQUcsQ0FBQSxPQUFBLENBQTFDLENBQUEsR0FBc0QsT0FBUSxDQUFBLENBQUEsQ0FBRyxDQUFBLE9BQUE7TUFFNUUsSUFBMkIsUUFBQSxHQUFXLEVBQUUsQ0FBQyxRQUF6QztRQUFBLEVBQUUsQ0FBQyxRQUFILEdBQWMsU0FBZDs7TUFFQSxDQUFBO0lBTEY7SUFPQSxLQUFBLEdBQVEsS0FBSyxDQUFDLFlBQU4sQ0FBbUIsT0FBbkIsRUFBNEI7TUFBRSxHQUFBLEVBQUssS0FBUDtNQUFjLEdBQUEsRUFBSyxLQUFuQjtLQUE1QixFQUF3RDtNQUFFLEtBQUEsRUFBTyxLQUFUO01BQWdCLE1BQUEsRUFBUSxNQUF4QjtLQUF4RDtJQUVSLENBQUEsR0FBSSxLQUFLLENBQUM7SUFDVixDQUFBLEdBQUksS0FBSyxDQUFDO0lBRVYsU0FBQSxHQUFZLEtBQUssQ0FBQyxJQUFOLENBQVcsTUFBWDtXQUVaLEtBQUssQ0FBQyxRQUFOLENBQWUsU0FBZixFQUEwQixLQUFLLENBQUMsS0FBaEMsRUFBdUMsQ0FBdkMsRUFBMEMsS0FBSyxDQUFDLEtBQWhELEVBQXVELE1BQXZEO0VBcEJXO0VBdUJiLGNBQUEsR0FBaUIsU0FBQyxDQUFELEVBQUksRUFBSjtBQUNmLFFBQUE7SUFBQSxLQUFBLEdBQVEsQ0FBQyxDQUFDLElBQUYsSUFBVSxDQUFLLElBQUEsSUFBQSxDQUFTLEVBQUUsQ0FBQyxZQUFMLEdBQW1CLFFBQTFCLENBQUw7SUFFbEIsRUFBQSxHQUFLLEVBQUUsQ0FBQyxTQUFILENBQWEsY0FBYjtJQUVMLEVBQUUsQ0FBQyxJQUFILENBQ0U7TUFBQSxTQUFBLEVBQVcsWUFBQSxHQUFZLENBQUUsQ0FBQSxDQUFFLEtBQUYsQ0FBRixDQUFaLEdBQXdCLE1BQW5DO0tBREY7V0FHQSxFQUFFLENBQUMsTUFBSCxDQUFVLE1BQVYsQ0FDRSxDQUFDLElBREgsQ0FDUSxFQUFFLENBQUMsTUFBSCxDQUFVLE1BQVYsQ0FBQSxDQUFrQixFQUFsQixDQURSLENBRUUsQ0FBQyxJQUZILENBR0k7TUFBQSxDQUFBLEVBQUcsRUFBSDtNQUNBLENBQUEsRUFBRyxDQUFDLEVBREo7TUFFQSxNQUFBLEVBQVEsTUFGUjtNQUdBLFdBQUEsRUFBYSxPQUhiO0tBSEo7RUFSZTtFQWdCakIsZ0JBQUEsR0FBbUIsU0FBQyxNQUFELEVBQVMsSUFBVDtBQUNqQixRQUFBO0lBQUEsRUFBQSxHQUFLLEVBQUUsQ0FBQyxNQUFILENBQVUsT0FBVixDQUNILENBQUMsTUFERSxDQUNLLEdBREwsQ0FFSCxDQUFDLElBRkUsQ0FHRDtNQUFBLEVBQUEsRUFBSyxrQkFBTDtNQUNBLENBQUEsS0FBQSxDQUFBLEVBQVEsYUFEUjtLQUhDO0lBTUwsRUFBRSxDQUFDLE1BQUgsQ0FBVSxNQUFWLENBQ0UsQ0FBQyxJQURILENBRUk7TUFBQSxLQUFBLEVBQVEsR0FBUjtNQUNBLE1BQUEsRUFBUSxNQURSO01BRUEsTUFBQSxFQUFRLEVBQUUsQ0FBQyxNQUZYO01BR0EsSUFBQSxFQUFRLE1BSFI7S0FGSjtJQU9BLEVBQUUsQ0FBQyxNQUFILENBQVUsTUFBVixDQUNFLENBQUMsSUFESCxDQUNRLEdBRFIsRUFDYSxDQURiLENBRUUsQ0FBQyxJQUZILENBRVEsSUFGUixFQUVjLFNBRmQ7SUFLQSxTQUFBLEdBQVksU0FBQyxFQUFEO0FBQ1YsVUFBQTtNQUFBLElBQVUsRUFBRSxDQUFDLGtCQUFiO0FBQUEsZUFBQTs7TUFFQSxPQUFBLEdBQVUsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxFQUFFLENBQUMsS0FBSCxDQUFTLEVBQVQsQ0FBYSxDQUFBLENBQUEsQ0FBdEI7TUFDVixDQUFBLEdBQUksVUFBQSxDQUFXLE1BQU8sQ0FBQSxDQUFBLENBQWxCLEVBQXNCLE9BQXRCLEVBQStCLENBQS9CO01BRUosTUFBQSxHQUFVLE1BQU8sQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLEdBQUUsQ0FBRjtNQUNwQixPQUFBLEdBQVUsTUFBTyxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUE7TUFFcEIsQ0FBQSxHQUFRLGlCQUFBLElBQWEsQ0FBQyxPQUFBLEdBQVUsTUFBTSxDQUFDLElBQWxCLENBQUEsR0FBMEIsQ0FBQyxPQUFPLENBQUMsSUFBUixHQUFlLE9BQWhCLENBQTFDLEdBQXdFLE9BQXhFLEdBQXFGO01BRTFGLElBQUcsRUFBRSxDQUFDLFlBQUgsS0FBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFQLENBQUEsQ0FBeEI7UUFDRSxFQUFFLENBQUMsWUFBSCxHQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVAsQ0FBQTtRQUVsQixFQUFFLENBQUMsYUFBSCxDQUFpQixRQUFqQjtRQUVBLEVBQUUsQ0FBQyxTQUFILENBQWEsT0FBYixDQUFxQixDQUFDLFdBQXRCLENBQUE7UUFFQSxFQUFFLENBQUMsU0FBSCxDQUFhLGNBQWIsQ0FDRSxDQUFDLElBREgsQ0FDUSxNQURSLEVBQ2dCLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBUCxDQUFBLENBRGhCLEVBUEY7O01BV0EsQ0FBQSxHQUFJLE1BQU8sQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFWLENBQWlCLFNBQUMsQ0FBRDtlQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVAsQ0FBQSxDQUFBLEtBQXdCLEVBQUUsQ0FBQztNQURSLENBQWpCLENBQ3NDLENBQUMsS0FEdkMsQ0FBQTtNQUdKLENBQUEsR0FBSSxNQUFPLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBVixDQUFpQixTQUFDLENBQUQ7ZUFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFQLENBQUEsQ0FBQSxLQUF3QixFQUFFLENBQUM7TUFEUixDQUFqQixDQUNzQyxDQUFDLEtBRHZDLENBQUE7YUFHSixJQUFJLENBQUMsY0FBTCxDQUFvQixDQUFwQixFQUF3QixDQUFFLENBQUEsT0FBQSxDQUFGLEdBQWEsQ0FBRSxDQUFBLE9BQUEsQ0FBdkM7SUE1QlU7SUErQlosS0FBQSxHQUFRLFNBQUMsRUFBRDtNQUNOLEVBQUUsQ0FBQyxrQkFBSCxHQUF3QixDQUFJLEVBQUUsQ0FBQztNQUUvQixTQUFBLENBQVUsRUFBVjthQUVBLEVBQUUsQ0FBQyxTQUFILENBQWEsbUJBQWIsQ0FDRSxDQUFDLEtBREgsQ0FDUztRQUFBLE1BQUEsRUFBVyxFQUFFLENBQUMsa0JBQU4sR0FBOEIsT0FBOUIsR0FBMkMsRUFBRSxDQUFDLE1BQXREO09BRFQ7SUFMTTtXQVFSLFNBQVMsQ0FBQyxNQUFWLENBQWlCLE1BQWpCLENBQ0UsQ0FBQyxJQURILENBRUk7TUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFRLFNBQVI7TUFDQSxLQUFBLEVBQVEsS0FEUjtNQUVBLE1BQUEsRUFBUSxNQUZSO01BR0EsSUFBQSxFQUFRLE1BSFI7S0FGSixDQU9FLENBQUMsRUFQSCxDQU9NLFdBUE4sRUFPbUIsU0FBQTthQUFHLFNBQUEsQ0FBVSxJQUFWO0lBQUgsQ0FQbkIsQ0FRRSxDQUFDLEVBUkgsQ0FRTSxPQVJOLEVBUW1CLFNBQUE7YUFBRyxLQUFBLENBQU0sSUFBTjtJQUFILENBUm5CO0VBMURpQjtFQXFFbkIsSUFBQSxHQUFPLFNBQUMsS0FBRDtBQUNMLFFBQUE7SUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLE1BQVo7SUFFQSxVQUFBLENBQVcsS0FBTSxDQUFBLENBQUEsQ0FBakIsRUFBcUIsS0FBTSxDQUFBLENBQUEsQ0FBM0I7SUFFQSxDQUFBLEdBQUksS0FBTSxDQUFBLENBQUE7SUFDVixDQUFBLEdBQUksS0FBTSxDQUFBLENBQUE7SUFFVixJQUFBLEdBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFQLENBQUEsQ0FDTCxDQUFDLENBREksQ0FDRixTQUFDLENBQUQ7YUFBUyxDQUFBLENBQUUsQ0FBQyxDQUFDLElBQUo7SUFBVCxDQURFLENBRUwsQ0FBQyxDQUZJLENBRUYsU0FBQyxDQUFELEVBQUcsQ0FBSDthQUFTLENBQUEsQ0FBRSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsT0FBQSxDQUFQO0lBQVQsQ0FGRTtJQUlQLFNBQ0UsQ0FBQyxLQURILENBQ1MsQ0FEVDtJQUdBLFNBQVMsQ0FBQyxNQUFWLENBQWlCLFVBQWpCLENBQ0UsQ0FBQyxJQURILENBQ1EsSUFEUixFQUNjLFlBRGQsQ0FFRSxDQUFDLE1BRkgsQ0FFVSxNQUZWLENBR0UsQ0FBQyxJQUhILENBR1EsR0FIUixFQUdhLElBQUksQ0FBQyxFQUFMLENBQVEsTUFBUixDQUhiO0lBS0EsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsVUFBakIsQ0FDRSxDQUFDLElBREgsQ0FDUSxJQURSLEVBQ2MsWUFEZCxDQUVFLENBQUMsTUFGSCxDQUVVLE1BRlYsQ0FHRSxDQUFDLElBSEgsQ0FHUSxHQUhSLEVBR2EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxDQUFSLENBSGI7SUFLQSxTQUFTLENBQUMsTUFBVixDQUFpQixNQUFqQixDQUNFLENBQUMsSUFESCxDQUVJO01BQUEsQ0FBQSxFQUFHLElBQUksQ0FBQyxFQUFMLENBQVEsU0FBQyxDQUFELEVBQUcsQ0FBSDtlQUFTLENBQUEsQ0FBRSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsT0FBQSxDQUFQO01BQVQsQ0FBUixDQUFIO01BQ0EsSUFBQSxFQUFNLFNBQUMsQ0FBRDtBQUFPLFlBQUE7UUFBQSxVQUFHLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxXQUFBLENBQUwsRUFBQSxhQUFxQixFQUFFLENBQUMsbUJBQXhCLEVBQUEsR0FBQSxNQUFIO2lCQUFvRCxFQUFFLENBQUMsS0FBdkQ7U0FBQSxNQUFBO2lCQUFpRSxFQUFFLENBQUMsS0FBcEU7O01BQVAsQ0FETjtNQUVBLGNBQUEsRUFBZ0IsR0FGaEI7TUFHQSxXQUFBLEVBQWEsa0JBSGI7S0FGSjtJQU9BLFNBQVMsQ0FBQyxNQUFWLENBQWlCLE1BQWpCLENBQ0UsQ0FBQyxJQURILENBRUk7TUFBQSxDQUFBLEVBQUcsSUFBSSxDQUFDLEVBQUwsQ0FBUSxTQUFDLENBQUQsRUFBRyxDQUFIO2VBQVMsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxPQUFBLENBQVA7TUFBVCxDQUFSLENBQUg7TUFDQSxJQUFBLEVBQU8sU0FBQyxDQUFEO0FBQU8sWUFBQTtRQUFBLFVBQUcsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLFdBQUEsQ0FBTCxFQUFBLGFBQXFCLEVBQUUsQ0FBQyxtQkFBeEIsRUFBQSxHQUFBLE1BQUg7aUJBQW9ELEVBQUUsQ0FBQyxLQUF2RDtTQUFBLE1BQUE7aUJBQWlFLEVBQUUsQ0FBQyxLQUFwRTs7TUFBUCxDQURQO01BRUEsY0FBQSxFQUFnQixHQUZoQjtNQUdBLFdBQUEsRUFBYSxrQkFIYjtLQUZKO0lBT0EsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsTUFBcEIsQ0FDRSxDQUFDLElBREgsQ0FFSTtNQUFBLE1BQUEsRUFBUSxPQUFSO01BQ0EsYUFBQSxFQUFlLENBRGY7TUFFQSxnQkFBQSxFQUFrQixHQUZsQjtLQUZKO0lBTUEsZ0JBQUEsQ0FBaUIsS0FBakIsRUFBd0IsRUFBRSxDQUFDLGdCQUEzQjtXQUVBLFNBQVMsQ0FBQyxNQUFWLENBQWlCLE1BQWpCLENBQ0UsQ0FBQyxJQURILENBRUk7TUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFPLE1BQVA7TUFDQSxDQUFBLEVBQUcsQ0FBQyxNQUFELEdBQVEsQ0FEWDtNQUVBLENBQUEsRUFBRyxDQUFDLEVBRko7TUFHQSxTQUFBLEVBQVcsYUFIWDtNQUlBLEVBQUEsRUFBSSxLQUpKO01BS0EsYUFBQSxFQUFlLFFBTGY7S0FGSixDQVNFLENBQUMsSUFUSCxDQVNRLFNBQUMsQ0FBRDthQUFPLEVBQUUsQ0FBQyxPQUFRLENBQUEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLFdBQUEsQ0FBTDtJQUFsQixDQVRSO0VBL0NLO0FBMkRQLFNBQU8sSUFBQSxHQUNMO0lBQUEsSUFBQSxFQUFNLElBQU47SUFDQSxDQUFBLEVBQUcsU0FBQyxLQUFEO2FBQVcsQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFQLEVBQWEsS0FBYjtJQUFYLENBREg7SUFFQSxnQkFBQSxFQUFrQixnQkFGbEI7SUFHQSxjQUFBLEVBQWdCLGNBSGhCOztBQW5MOEIsQ0FBbEMiLCJmaWxlIjoiYXJlYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSBbJ2QzJywgJ2dyYXBoJywgJ2dsb2JhbCddLCAoZDMsIGdyYXBoLCBfZykgLT5cbiAgY29udGFpbmVyID0gbnVsbFxuXG4gIHdpZHRoICA9IF9nLmJhc2VfZ3JhcGgud2lkdGgoKVxuICBoZWlnaHQgPSBfZy5iYXNlX2dyYXBoLmhlaWdodCgpIC0gMjBcblxuICBiaXNlY3REYXRlID0gZDMuYmlzZWN0b3IoKGQpIC0+IGQuZGF0ZSkubGVmdFxuXG4gIHggPSB5ID0gbnVsbFxuXG5cbiAgbWFrZV9mcmFtZSA9IChzb3VyY2UwLCBzb3VyY2UxKSAtPlxuICAgIHlfbWluID0gZDMubWluIEFycmF5Ojpjb25jYXQoZDMubWluKHNvdXJjZTAsIChkKSAtPiBkWyd2YWx1ZSddKSwgZDMubWluKHNvdXJjZTEsIChkKSAtPiBkWyd2YWx1ZSddKSlcbiAgICB5X21heCA9IGQzLm1heCBBcnJheTo6Y29uY2F0KGQzLm1heChzb3VyY2UwLCAoZCkgLT4gZFsndmFsdWUnXSksIGQzLm1heChzb3VyY2UxLCAoZCkgLT4gZFsndmFsdWUnXSkpXG5cbiAgICBfZy5tYXhfZGlmZiA9IGkgPSAwXG5cbiAgICB3aGlsZSBpIDwgc291cmNlMC5sZW5ndGhcbiAgICAgIHRtcF9kaWZmID0gTWF0aC5hYnMoc291cmNlMVtpXVsndmFsdWUnXSAtIHNvdXJjZTBbaV1bJ3ZhbHVlJ10pIC8gc291cmNlMFtpXVsndmFsdWUnXVxuXG4gICAgICBfZy5tYXhfZGlmZiA9IHRtcF9kaWZmIGlmICh0bXBfZGlmZiA+IF9nLm1heF9kaWZmKVxuXG4gICAgICBpKytcblxuICAgIGZyYW1lID0gZ3JhcGguY3JlYXRlX2ZyYW1lIHNvdXJjZTAsIHsgbWluOiB5X21pbiwgbWF4OiB5X21heCB9LCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfVxuXG4gICAgeCA9IGZyYW1lLnhcbiAgICB5ID0gZnJhbWUueVxuXG4gICAgY29udGFpbmVyID0gZ3JhcGguZHJhdyAnYXJlYSdcblxuICAgIGdyYXBoLnNldF9heGlzIGNvbnRhaW5lciwgZnJhbWUueEF4aXMsIDAsIGZyYW1lLnlBeGlzLCBoZWlnaHRcblxuXG4gIG1vdmVfdGltZV9tYXJrID0gKGQsIGR6KSAtPlxuICAgIGRkYXRlID0gZC5kYXRlIG9yIChuZXcgRGF0ZShcIiN7IF9nLmN1cnJlbnRfeWVhciB9LzAxLzAxXCIpKVxuXG4gICAgdG0gPSBkMy5zZWxlY3RBbGwgJy50aW1lLW1hcmtlcidcblxuICAgIHRtLmF0dHJcbiAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoI3sgeChkZGF0ZSkgfSwgMClcIlxuXG4gICAgdG0uc2VsZWN0IFwidGV4dFwiXG4gICAgICAudGV4dCBkMy5mb3JtYXQoXCIsLjJmXCIpKGR6KVxuICAgICAgLmF0dHJcbiAgICAgICAgeTogMjBcbiAgICAgICAgeDogLTUwXG4gICAgICAgIHN0cm9rZTogJ2dyZXknXG4gICAgICAgICdmb250LXNpemUnOiAnMC44ZW0nXG5cbiAgY3JlYXRlX3RpbWVfbWFyayA9IChzb3VyY2UsIHJvd3MpIC0+XG4gICAgdG0gPSBkMy5zZWxlY3QgJyNhcmVhJ1xuICAgICAgLmFwcGVuZCAnZydcbiAgICAgIC5hdHRyXG4gICAgICAgIGlkIDogXCJ0aW1lLW1hcmtlci1saW5lXCJcbiAgICAgICAgY2xhc3MgOiBcInRpbWUtbWFya2VyXCJcblxuICAgIHRtLmFwcGVuZCBcInJlY3RcIlxuICAgICAgLmF0dHJcbiAgICAgICAgd2lkdGg6ICAwLjFcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgc3Ryb2tlOiBfZy5ibHVlX2RcbiAgICAgICAgZmlsbDogICBcIm5vbmVcIlxuXG4gICAgdG0uYXBwZW5kIFwidGV4dFwiXG4gICAgICAuYXR0ciBcInhcIiwgMFxuICAgICAgLmF0dHIgXCJkeVwiLCBcIi0wLjM1ZW1cIlxuXG5cbiAgICBtb3VzZW1vdmUgPSAoaXQpIC0+XG4gICAgICByZXR1cm4gaWYgX2cubW91c2Vtb3ZlX2Rpc2FibGVkXG5cbiAgICAgIHhfbW91c2UgPSB4LmludmVydCBkMy5tb3VzZShpdClbMF1cbiAgICAgIGkgPSBiaXNlY3REYXRlIHNvdXJjZVswXSwgeF9tb3VzZSwgMVxuXG4gICAgICBkX2xlZnQgID0gc291cmNlWzBdW2ktMV1cbiAgICAgIGRfcmlnaHQgPSBzb3VyY2VbMF1baV1cblxuICAgICAgZCAgPSBpZiBkX3JpZ2h0PyBhbmQgKHhfbW91c2UgLSBkX2xlZnQuZGF0ZSkgPiAoZF9yaWdodC5kYXRlIC0geF9tb3VzZSkgdGhlbiBkX3JpZ2h0IGVsc2UgZF9sZWZ0XG5cbiAgICAgIGlmIF9nLmN1cnJlbnRfeWVhciBpc250IGQuZGF0ZS5nZXRGdWxsWWVhcigpXG4gICAgICAgIF9nLmN1cnJlbnRfeWVhciA9IGQuZGF0ZS5nZXRGdWxsWWVhcigpXG5cbiAgICAgICAgX2cucmVsb2FkX2dyYXBocyAndXBkYXRlJ1xuXG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmF4aXMnKS5tb3ZlVG9Gcm9udCgpXG5cbiAgICAgICAgZDMuc2VsZWN0QWxsICcudGltZS1tYXJrZXInXG4gICAgICAgICAgLmF0dHIgJ3llYXInLCBkLmRhdGUuZ2V0RnVsbFllYXIoKVxuXG5cbiAgICAgIHYgPSBzb3VyY2VbMF0uZmlsdGVyKChlKSAtPlxuICAgICAgICBlLmRhdGUuZ2V0RnVsbFllYXIoKSBpcyBfZy5jdXJyZW50X3llYXIpLmZpcnN0KClcblxuICAgICAgYiA9IHNvdXJjZVsxXS5maWx0ZXIoKGUpIC0+XG4gICAgICAgIGUuZGF0ZS5nZXRGdWxsWWVhcigpIGlzIF9nLmN1cnJlbnRfeWVhcikuZmlyc3QoKVxuXG4gICAgICBhcmVhLm1vdmVfdGltZV9tYXJrIGQsIChiWyd2YWx1ZSddIC0gdlsndmFsdWUnXSlcblxuXG4gICAgY2xpY2sgPSAoaXQpIC0+XG4gICAgICBfZy5tb3VzZW1vdmVfZGlzYWJsZWQgPSBub3QgX2cubW91c2Vtb3ZlX2Rpc2FibGVkXG5cbiAgICAgIG1vdXNlbW92ZSBpdFxuXG4gICAgICBkMy5zZWxlY3RBbGwgJy50aW1lLW1hcmtlciByZWN0J1xuICAgICAgICAuc3R5bGUgc3Ryb2tlOiBpZiBfZy5tb3VzZW1vdmVfZGlzYWJsZWQgdGhlbiBcImJsYWNrXCIgZWxzZSBfZy5ibHVlX2RcblxuICAgIGNvbnRhaW5lci5hcHBlbmQgXCJyZWN0XCJcbiAgICAgIC5hdHRyXG4gICAgICAgIGNsYXNzOiAgXCJvdmVybGF5XCJcbiAgICAgICAgd2lkdGg6ICB3aWR0aFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICBmaWxsOiAgICdub25lJ1xuXG4gICAgICAub24gJ21vdXNlbW92ZScsIC0+IG1vdXNlbW92ZSB0aGlzXG4gICAgICAub24gJ2NsaWNrJywgICAgIC0+IGNsaWNrIHRoaXNcblxuXG4gIGRyYXcgPSAocXVlcnkpIC0+XG4gICAgZ3JhcGguY2xlYXIgJ2FyZWEnXG5cbiAgICBtYWtlX2ZyYW1lIHF1ZXJ5WzBdLCBxdWVyeVsxXVxuXG4gICAgYiA9IHF1ZXJ5WzFdXG4gICAgbyA9IHF1ZXJ5WzBdXG5cbiAgICBhcmVhID0gZDMuc3ZnLmFyZWEoKVxuICAgICAgLnggKGQpICAgLT4geChkLmRhdGUpXG4gICAgICAueSAoZCxpKSAtPiB5KGJbaV1bJ3ZhbHVlJ10pXG5cbiAgICBjb250YWluZXJcbiAgICAgIC5kYXR1bSBvXG5cbiAgICBjb250YWluZXIuYXBwZW5kICdjbGlwUGF0aCdcbiAgICAgIC5hdHRyIFwiaWRcIiwgXCJjbGlwLWJlbG93XCJcbiAgICAgIC5hcHBlbmQgXCJwYXRoXCJcbiAgICAgIC5hdHRyIFwiZFwiLCBhcmVhLnkwKGhlaWdodClcblxuICAgIGNvbnRhaW5lci5hcHBlbmQgJ2NsaXBQYXRoJ1xuICAgICAgLmF0dHIgXCJpZFwiLCBcImNsaXAtYWJvdmVcIlxuICAgICAgLmFwcGVuZCBcInBhdGhcIlxuICAgICAgLmF0dHIgXCJkXCIsIGFyZWEueTAoMClcblxuICAgIGNvbnRhaW5lci5hcHBlbmQgJ3BhdGgnXG4gICAgICAuYXR0clxuICAgICAgICBkOiBhcmVhLnkwKChkLGkpIC0+IHkob1tpXVsndmFsdWUnXSkpXG4gICAgICAgIGZpbGw6IChkKSAtPiBpZiBkWzBdWydpbmRpY2F0b3InXSBpbiBfZy5pbnZlcnRlZF9pbmRpY2F0b3JzIHRoZW4gX2cuYmx1ZSBlbHNlIF9nLmJsdWVcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IDAuNFxuICAgICAgICAnY2xpcC1wYXRoJzogJ3VybCgjY2xpcC1hYm92ZSknXG5cbiAgICBjb250YWluZXIuYXBwZW5kICdwYXRoJ1xuICAgICAgLmF0dHJcbiAgICAgICAgZDogYXJlYS55MCgoZCxpKSAtPiB5KG9baV1bJ3ZhbHVlJ10pKVxuICAgICAgICBmaWxsOiAgKGQpIC0+IGlmIGRbMF1bJ2luZGljYXRvciddIGluIF9nLmludmVydGVkX2luZGljYXRvcnMgdGhlbiBfZy5ibHVlIGVsc2UgX2cuYmx1ZVxuICAgICAgICAnZmlsbC1vcGFjaXR5JzogMC40XG4gICAgICAgICdjbGlwLXBhdGgnOiAndXJsKCNjbGlwLWJlbG93KSdcblxuICAgIGNvbnRhaW5lci5zZWxlY3RBbGwgJ3BhdGgnXG4gICAgICAuYXR0clxuICAgICAgICBzdHJva2U6ICdibGFjaydcbiAgICAgICAgJ3N0b2tlLXdpZHRoJzogMVxuICAgICAgICAnc3Ryb2tlLW9wYWNpdHknOiAwLjJcblxuICAgIGNyZWF0ZV90aW1lX21hcmsgcXVlcnksIF9nLmluZGljYXRvcnNfcXVlcnlcblxuICAgIGNvbnRhaW5lci5hcHBlbmQgJ3RleHQnXG4gICAgICAuYXR0clxuICAgICAgICBjbGFzczogJ2F4aXMnXG4gICAgICAgIHg6IC1oZWlnaHQvMlxuICAgICAgICB5OiAtNTBcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKC05MCknXG4gICAgICAgIGR5OiAnMWVtJ1xuICAgICAgICAndGV4dC1hbmNob3InOiAnbWlkZGxlJ1xuXG4gICAgICAudGV4dCAoZCkgLT4gX2cuZGV0YWlsc1tkWzBdWydpbmRpY2F0b3InXV1cblxuXG4gIHJldHVybiBhcmVhID1cbiAgICBkcmF3OiBkcmF3XG4gICAgeDogKHZhbHVlKSAtPiB4LmNhbGwgdGhpcywgdmFsdWVcbiAgICBjcmVhdGVfdGltZV9tYXJrOiBjcmVhdGVfdGltZV9tYXJrXG4gICAgbW92ZV90aW1lX21hcms6IG1vdmVfdGltZV9tYXJrXG4iXX0=
