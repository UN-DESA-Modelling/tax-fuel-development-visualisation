define(['jquery'], function($) {
  window._g = {
    data_file: "./data.csv",
    ignored_indicators: ["base"],
    ignored_scenarios: ["base", "save", "edu.3"],
    ignored_countries: [],
    inverted_indicators: ["mr.u5", "mr.mat"],
    details: {
      base: "Base",
      infr: "Infrastructure",
      save: "Savings/Debt",
      "edu.1": "Primary Education",
      "edu.3": "Tertiary Education",
      "edu.all": "All Education",
      "bdg.exp": "Budget Expansion",
      gdp: "Real GDP",
      edu: "Primary Education Completion",
      water: "Drinking Water",
      sanit: "Basic Sanitation",
      "mr.u5": "Under-5 Mortality",
      "mr.mat": "Maternal Mortality",
      bol: "Bolivia",
      cri: "Costa Rica",
      uga: "Uganda"
    },
    subtitles: {
      country: "countries",
      indicator: "indicators",
      scenario: "policy scenarios"
    },
    year_range: [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030],
    current_year: 2016,
    base_graph: {
      width: function() {
        return d3.select('#area-graph').node().clientWidth - 65;
      },
      height: function() {
        return ($(window).height() - 450) / 2;
      }
    },
    graphs: {
      diff_graph: {
        draw_function: function(func, action) {
          return func({
            id: 'diffbar',
            action: action,
            param: 'year',
            x_vars: ['year']
          });
        }
      },
      scenarios_graph: {
        draw_function: function(func, action) {
          return func({
            id: 'scenarios',
            action: action,
            param: 'scenario',
            x_vars: _g.scenarios.map(function(e) {
              return e['scn'];
            })
          });
        }
      },
      indicators_graph: {
        draw_function: function(func, action) {
          return func({
            id: 'indicators',
            action: action,
            param: 'indicator',
            x_vars: _g.indicators.map(function(e) {
              return e['ind'];
            })
          });
        }
      },
      countries_graph: {
        draw_function: function(func, action) {
          return func({
            id: 'countries',
            action: action,
            param: 'country',
            x_vars: _g.countries.map(function(e) {
              return e['cnt'];
            })
          });
        }
      }
    },
    mousemove_disabled: false,
    blue: '#00ADEF',
    blue_d: '#276CA4',
    grey: '#BDBCBC',
    red: '#F2635C',
    green: '#1BA397',
    current_country: 'uga',
    current_indicator: 'mr.u5',
    current_scenario: 'infr',
    current_assets: [],
    queries: {
      year: null,
      indicator: null,
      country: null,
      scenario: null
    },
    indicators: [],
    scenarios: [],
    countries: [],
    max_diff: 0
  };
  return _g;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RFQ7WUFFQSxLQUFBLEVBQVMsU0FGVDtZQUdBLE1BQUEsRUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQWIsQ0FBaUIsU0FBQyxDQUFEO3FCQUFPLENBQUUsQ0FBQSxLQUFBO1lBQVQsQ0FBakIsQ0FIUjtXQURGO1FBRGEsQ0FBZjtPQXpCRjtLQS9ERjtJQWdHQSxrQkFBQSxFQUFvQixLQWhHcEI7SUFrR0EsSUFBQSxFQUFRLFNBbEdSO0lBbUdBLE1BQUEsRUFBUSxTQW5HUjtJQW9HQSxJQUFBLEVBQVEsU0FwR1I7SUFxR0EsR0FBQSxFQUFRLFNBckdSO0lBc0dBLEtBQUEsRUFBUSxTQXRHUjtJQTRHQSxlQUFBLEVBQW1CLEtBNUduQjtJQTZHQSxpQkFBQSxFQUFtQixPQTdHbkI7SUE4R0EsZ0JBQUEsRUFBbUIsTUE5R25CO0lBZ0hBLGNBQUEsRUFBZ0IsRUFoSGhCO0lBa0hBLE9BQUEsRUFDRTtNQUFBLElBQUEsRUFBVyxJQUFYO01BQ0EsU0FBQSxFQUFXLElBRFg7TUFFQSxPQUFBLEVBQVcsSUFGWDtNQUdBLFFBQUEsRUFBVyxJQUhYO0tBbkhGO0lBd0hBLFVBQUEsRUFBWSxFQXhIWjtJQXlIQSxTQUFBLEVBQVksRUF6SFo7SUEwSEEsU0FBQSxFQUFZLEVBMUhaO0lBNEhBLFFBQUEsRUFBVSxDQTVIVjs7QUE4SEYsU0FBTztBQXJJVSxDQUFuQiIsImZpbGUiOiJnbG9iYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIFRoaXMgZmlsZSBkb3VibGVzIGFzIGEgY29uZmlndXJhdGlvbiBmaWxlIGFuZCBhbiBvYmplYyBfZyB0aGF0J2xsXG4jIHN0b3JlIHNvbWUgZ2xvYmFsIHZhcmlhYmxlcy4gRGVmaW5lIEFMTCBnbG9iYWwgdmFyaWFibGVzIGhlcmUuXG4jXG5kZWZpbmUgWydqcXVlcnknXSwgKCQpIC0+XG4gIHdpbmRvdy5fZyA9XG4gICAgIyBUaGUgZGF0YSBmaWxlIGxvY2F0aW9uLiBZb3UgY2FuIHNldCBpdCB0byBzb21ldGhpbmcgbGlrZTpcbiAgICAjIGh0dHA6Ly9leGFtcGxlLm9yZy9kYXRhLmNzdlxuICAgICNcbiAgICAjIEQzIGhhbmRsZXMgdGhpcy5cbiAgICAjXG4gICAgZGF0YV9maWxlOiBcIi4vZGF0YS5jc3ZcIlxuXG4gICAgIyBJZ25vcmVkIHBhcmFtZXRlcnMuIE5vdCB0byBiZSBwbG90dGVkIG9yIHF1ZXJpZWQuXG4gICAgI1xuICAgIGlnbm9yZWRfaW5kaWNhdG9yczogW1wiYmFzZVwiXVxuICAgIGlnbm9yZWRfc2NlbmFyaW9zOiAgW1wiYmFzZVwiLCBcInNhdmVcIiwgXCJlZHUuM1wiXVxuICAgIGlnbm9yZWRfY291bnRyaWVzOiAgW11cblxuICAgICMgSW5kaWNhdG9ycyB0aGF0IHRoZSBkZWNyZWFzZSBpcyBhY3R1YWxseSBpcyBhIHBvc2l0aXZlIHRoaW5nOlxuICAgICNcbiAgICBpbnZlcnRlZF9pbmRpY2F0b3JzOiBbXCJtci51NVwiLCBcIm1yLm1hdFwiXVxuXG4gICAgZGV0YWlsczpcbiAgICAgIGJhc2U6ICAgICAgXCJCYXNlXCJcbiAgICAgIGluZnI6ICAgICAgXCJJbmZyYXN0cnVjdHVyZVwiXG4gICAgICBzYXZlOiAgICAgIFwiU2F2aW5ncy9EZWJ0XCJcbiAgICAgIFwiZWR1LjFcIjogICBcIlByaW1hcnkgRWR1Y2F0aW9uXCJcbiAgICAgIFwiZWR1LjNcIjogICBcIlRlcnRpYXJ5IEVkdWNhdGlvblwiXG4gICAgICBcImVkdS5hbGxcIjogXCJBbGwgRWR1Y2F0aW9uXCJcbiAgICAgIFwiYmRnLmV4cFwiOiBcIkJ1ZGdldCBFeHBhbnNpb25cIlxuXG4gICAgICBnZHA6ICAgICAgIFwiUmVhbCBHRFBcIlxuICAgICAgZWR1OiAgICAgICBcIlByaW1hcnkgRWR1Y2F0aW9uIENvbXBsZXRpb25cIlxuICAgICAgd2F0ZXI6ICAgICBcIkRyaW5raW5nIFdhdGVyXCJcbiAgICAgIHNhbml0OiAgICAgXCJCYXNpYyBTYW5pdGF0aW9uXCJcbiAgICAgIFwibXIudTVcIjogICBcIlVuZGVyLTUgTW9ydGFsaXR5XCJcbiAgICAgIFwibXIubWF0XCI6ICBcIk1hdGVybmFsIE1vcnRhbGl0eVwiXG5cbiAgICAgIGJvbDogXCJCb2xpdmlhXCJcbiAgICAgIGNyaTogXCJDb3N0YSBSaWNhXCJcbiAgICAgIHVnYTogXCJVZ2FuZGFcIlxuXG5cbiAgICBzdWJ0aXRsZXM6XG4gICAgICBjb3VudHJ5OiAgIFwiY291bnRyaWVzXCJcbiAgICAgIGluZGljYXRvcjogXCJpbmRpY2F0b3JzXCJcbiAgICAgIHNjZW5hcmlvOiAgXCJwb2xpY3kgc2NlbmFyaW9zXCJcblxuXG4gICAgIyBUaGUgeWVhciByYW5nZSBwYXJzZWQgZnJvbSB0aGUgZGF0YSBmaWxlLlxuICAgICNcbiAgICB5ZWFyX3JhbmdlOiBbMjAxNS4uMjAzMF1cblxuXG4gICAgIyBUaGUgc3RhcnRpbmcgeWVhciBmb3IgdGhlIGdyYXBoc1xuICAgICNcbiAgICBjdXJyZW50X3llYXI6IDIwMTZcblxuXG4gICAgIyBkaWZmIGFuZCBhcmVhIGdyYXBocyBzaXplcy9wb3NpdGlvbnNcbiAgICAjXG4gICAgIyBJdCBhZGFwdHMgdG8gdGhlIHNjcmVlbiB1cG9uIGxvYWRpbmcuXG4gICAgI1xuICAgICMgVE9ETzogZml4IGl0LiBpdCdzIHVnbHkuXG4gICAgI1xuICAgIGJhc2VfZ3JhcGg6XG4gICAgICB3aWR0aDogIC0+IGQzLnNlbGVjdCgnI2FyZWEtZ3JhcGgnKS5ub2RlKCkuY2xpZW50V2lkdGggLSA2NVxuICAgICAgaGVpZ2h0OiAtPiAoJCh3aW5kb3cpLmhlaWdodCgpIC0gNDUwKSAvIDJcblxuXG4gICAgIyBiYXIgZ3JhcGhzIHNpemVzL3Bvc2l0aW9uczpcbiAgICAjXG4gICAgZ3JhcGhzOlxuICAgICAgZGlmZl9ncmFwaDpcbiAgICAgICAgZHJhd19mdW5jdGlvbjogKGZ1bmMsIGFjdGlvbikgLT5cbiAgICAgICAgICBmdW5jXG4gICAgICAgICAgICBpZDogICAgICAnZGlmZmJhcidcbiAgICAgICAgICAgIGFjdGlvbjogIGFjdGlvblxuICAgICAgICAgICAgcGFyYW06ICAgJ3llYXInXG4gICAgICAgICAgICB4X3ZhcnM6ICBbJ3llYXInXVxuXG4gICAgICBzY2VuYXJpb3NfZ3JhcGg6XG4gICAgICAgIGRyYXdfZnVuY3Rpb246IChmdW5jLCBhY3Rpb24pIC0+XG4gICAgICAgICAgZnVuY1xuICAgICAgICAgICAgaWQ6ICAgICAgJ3NjZW5hcmlvcydcbiAgICAgICAgICAgIGFjdGlvbjogIGFjdGlvblxuICAgICAgICAgICAgcGFyYW06ICAgJ3NjZW5hcmlvJ1xuICAgICAgICAgICAgeF92YXJzOiAgX2cuc2NlbmFyaW9zLm1hcCAoZSkgLT4gZVsnc2NuJ11cblxuICAgICAgaW5kaWNhdG9yc19ncmFwaDpcbiAgICAgICAgZHJhd19mdW5jdGlvbjogKGZ1bmMsIGFjdGlvbikgLT5cbiAgICAgICAgICBmdW5jXG4gICAgICAgICAgICBpZDogICAgICAnaW5kaWNhdG9ycydcbiAgICAgICAgICAgIGFjdGlvbjogIGFjdGlvblxuICAgICAgICAgICAgcGFyYW06ICAgJ2luZGljYXRvcidcbiAgICAgICAgICAgIHhfdmFyczogIF9nLmluZGljYXRvcnMubWFwIChlKSAtPiBlWydpbmQnXVxuXG4gICAgICBjb3VudHJpZXNfZ3JhcGg6XG4gICAgICAgIGRyYXdfZnVuY3Rpb246IChmdW5jLCBhY3Rpb24pIC0+XG4gICAgICAgICAgZnVuY1xuICAgICAgICAgICAgaWQ6ICAgICAgJ2NvdW50cmllcydcbiAgICAgICAgICAgIGFjdGlvbjogIGFjdGlvblxuICAgICAgICAgICAgcGFyYW06ICAgJ2NvdW50cnknXG4gICAgICAgICAgICB4X3ZhcnM6IF9nLmNvdW50cmllcy5tYXAgKGUpIC0+IGVbJ2NudCddXG5cblxuICAgIG1vdXNlbW92ZV9kaXNhYmxlZDogZmFsc2VcblxuICAgIGJsdWU6ICAgJyMwMEFERUYnXG4gICAgYmx1ZV9kOiAnIzI3NkNBNCdcbiAgICBncmV5OiAgICcjQkRCQ0JDJ1xuICAgIHJlZDogICAgJyNGMjYzNUMnXG4gICAgZ3JlZW46ICAnIzFCQTM5NydcblxuICAgICMgZ2xvYmFsIHZhcmlhYmxlcy9hdHRyaWJ1dGVzLlxuICAgICNcbiAgICAjIFRPRE86IHRyeSB0byByZW1vdmUgYWxsIG9mIHRoZW1cbiAgICAjXG4gICAgY3VycmVudF9jb3VudHJ5OiAgICd1Z2EnXG4gICAgY3VycmVudF9pbmRpY2F0b3I6ICdtci51NSdcbiAgICBjdXJyZW50X3NjZW5hcmlvOiAgJ2luZnInXG5cbiAgICBjdXJyZW50X2Fzc2V0czogW11cblxuICAgIHF1ZXJpZXM6XG4gICAgICB5ZWFyOiAgICAgIG51bGxcbiAgICAgIGluZGljYXRvcjogbnVsbFxuICAgICAgY291bnRyeTogICBudWxsXG4gICAgICBzY2VuYXJpbzogIG51bGxcblxuICAgIGluZGljYXRvcnM6IFtdXG4gICAgc2NlbmFyaW9zOiAgW11cbiAgICBjb3VudHJpZXM6ICBbXVxuXG4gICAgbWF4X2RpZmY6IDBcblxuICByZXR1cm4gX2dcbiJdfQ==
